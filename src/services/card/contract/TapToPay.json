{
  "contractName": "TapToPay",
  "constructorInputs": [
    {
      "name": "ownerPkh",
      "type": "bytes20"
    },
    {
      "name": "backendPkh",
      "type": "bytes20"
    },
    {
      "name": "category",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "spend",
      "inputs": [
        {
          "name": "terminalId",
          "type": "bytes"
        },
        {
          "name": "terminalSig",
          "type": "sig"
        },
        {
          "name": "terminalPk",
          "type": "pubkey"
        },
        {
          "name": "backendSig",
          "type": "sig"
        },
        {
          "name": "backendPk",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "sweep",
      "inputs": [
        {
          "name": "ownerPk",
          "type": "pubkey"
        },
        {
          "name": "ownerSig",
          "type": "sig"
        }
      ]
    },
    {
      "name": "mutate",
      "inputs": [
        {
          "name": "ownerPk",
          "type": "pubkey"
        },
        {
          "name": "ownerSig",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_8 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_6 OP_ROLL OP_7 OP_ROLL OP_CHECKSIGVERIFY OP_4 OP_ROLL OP_5 OP_PICK OP_CHECKSIGVERIFY OP_TXOUTPUTCOUNT OP_2 OP_GREATERTHANOREQUAL OP_TXOUTPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_BOOLAND OP_VERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_ROT OP_EQUALVERIFY OP_ROT OP_3 OP_PICK OP_CAT OP_SHA256 1b OP_SPLIT OP_DROP OP_0 OP_UTXOTOKENCOMMITMENT OP_DUP OP_1 OP_SPLIT OP_4 OP_SPLIT OP_8 OP_SPLIT OP_3 OP_ROLL OP_1 OP_EQUALVERIFY OP_4 OP_ROLL OP_EQUALVERIFY OP_TXLOCKTIME OP_ROT OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_SWAP OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY 76a914 OP_5 OP_ROLL OP_HASH160 OP_CAT 88ac OP_CAT OP_1 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_1 OP_OUTPUTVALUE OP_ROT OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_DROP OP_1 OP_ELSE OP_3 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_4 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_4 OP_ROLL OP_4 OP_ROLL OP_CHECKSIG OP_NIP OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_2 OP_NUMEQUALVERIFY OP_3 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_2SWAP OP_CHECKSIG OP_NIP OP_NIP OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract TapToPay(bytes20 ownerPkh, bytes20 backendPkh, bytes category) {\n    function spend(\n        bytes terminalId,\n        sig terminalSig, \n        pubkey terminalPk, \n        sig backendSig, \n        pubkey backendPk) {\n        \n        require(hash160(backendPk) == backendPkh, 'Invalid backend public key hash');\n        require(checkSig(backendSig, backendPk), 'Invalid backend signature');\n        require(checkSig(terminalSig, terminalPk), 'Invalid terminal signature');\n\n        require(tx.outputs.length >= 2 && tx.outputs.length <= 3, 'Unexpected number of outputs, must be 2 or 3');\n\n        // auth NFT presented must have correct category and commitment\n        bytes tokenCategory = (tx.inputs[0].tokenCategory).split(32)[0];\n        require(tokenCategory == category, 'Invalid token category');\n\n        // require that terminal is valid and authorized\n        bytes fullHash = sha256(terminalId + terminalPk);\n        bytes terminalHash = fullHash.split(27)[0];\n\n        bytes commitment = tx.inputs[0].nftCommitment;\n        bytes flag, bytes rest = commitment.split(1);\n        bytes expirationBlock, bytes rest2 = rest.split(4);\n        bytes spendLimit, bytes expectedTerminalHash = rest2.split(8);\n        \n        require(flag == 0x01, 'Access denied: Terminal is not authorized');\n        require(terminalHash == expectedTerminalHash, 'Access denied: Invalid terminal id');\n        require(tx.locktime <= int(expirationBlock), 'Authentication has expired');\n\n        // require that auth NFT commitment is not tampered with after spending\n        require(commitment == tx.outputs[0].nftCommitment, 'Auth NFT output commitment should not change');\n\n        // auth NFT must be sent back to this contract\n        bytes contractLock = tx.inputs[this.activeInputIndex].lockingBytecode;\n        bool nftSendsToContract = tx.outputs[0].lockingBytecode == contractLock;\n        require(nftSendsToContract, 'Auth NFT must send back to this contract');\n\n        // check if output[1] sends to the recipient (terminal)\n        bytes25 recipientLock = new LockingBytecodeP2PKH(hash160(terminalPk));\n        bool sendsToRecipient = tx.outputs[1].lockingBytecode == recipientLock;\n        require(sendsToRecipient, 'Send amount must send to the recipient');\n\n        // check that send amount is correct\n        int actualSendAmount = tx.outputs[1].value;\n        require(actualSendAmount <= int(spendLimit), 'Send amount exceeds spend limit');\n\n        // require that any change (enforced to be at output[2]) is sent back to this contract\n        if (tx.outputs.length == 3) {\n            require(tx.outputs[2].lockingBytecode == contractLock, 'Change must be sent back to contract');\n        }\n    }\n\n    function sweep(pubkey ownerPk, sig ownerSig) {\n        require(hash160(ownerPk) == ownerPkh, 'Invalid owner public key hash');\n        require(checkSig(ownerSig, ownerPk), 'Invalid owner signature');\n    }\n\n    function mutate (pubkey ownerPk, sig ownerSig) {\n        require(hash160(ownerPk) == ownerPkh, 'Invalid owner public key hash');\n        require(checkSig(ownerSig, ownerPk), 'Invalid owner signature');\n    }\n}\n\n",
  "debug": {
    "bytecode": "5379009c635879a97b88567a577aad547a5579adc452a2c453a19a6900ce01207f757b887b53797ea8011b7f7500cf76517f547f587f537a5188547a88c57b81a1697c00d288c0c700cd78880376a914557aa97e0288ac7e51cd8851cc7b81a169c4539c6352cd7888686d7551675379519c635479a988547a547aac77777767537a529d5379a98872ac77776868",
    "sourceMap": "4:4:55:5;;;;;11:24:11:33;;:16::34:1;:38::48:0;:8::85:1;12:25:12:35:0;;:37::46;;:8::78:1;13:25:13:36:0;;:38::48;;:8::81:1;15:16:15:33:0;:37::38;:16:::1;:42::59:0;:63::64;:42:::1;:16;:8::114;18:41:18:42:0;:31::57:1;:65::67:0;:30::68:1;:::71;19:33:19:41:0;:8::69:1;22:32:22:42:0;:45::55;;:32:::1;:25::56;23:44:23:46:0;:29::47:1;:::50;25:37:25:38:0;:27::53:1;26:33:26:43:0;:50::51;:33::52:1;27:56:27:57:0;:45::58:1;28:67:28:68:0;:55::69:1;30:16:30:20:0;;:24::28;:8::75:1;31:16:31:28:0;;:8::92:1;32:16:32:27:0;:35::50;:31::51:1;:16;:8::83;35:16:35:26:0;:41::42;:30::57:1;:8::107;38:39:38:60:0;:29::77:1;39:45:39:46:0;:34::63:1;:67::79:0;:34:40:80:1;43:32:43:77:0;:65::75;;:57::76:1;:32::77;;;44:43:44:44:0;:32::61:1;::45:76;48:42:48:43:0;:31::50:1;49:40:49::0;:36::51:1;:16;:8::88;52:12:52:29:0;:33::34;:12:::1;:36:54:9:0;53:31:53:32;:20::49:1;:53::65:0;:12::107:1;52:36:54:9;4:4:55:5;;;;57::60::0;;;;;58:24:58:31;;:16::32:1;:8::79;59:25:59:33:0;;:35::42;;:8::72:1;57:4:60:5;;;;62::65::0;;;;63:24:63:31;;:16::32:1;:8::79;64:25:64:42:0;:8::72:1;62:4:65:5;;3:0:66:1;",
    "logs": [],
    "requires": [
      {
        "ip": 12,
        "line": 11,
        "message": "Invalid backend public key hash"
      },
      {
        "ip": 17,
        "line": 12,
        "message": "Invalid backend signature"
      },
      {
        "ip": 22,
        "line": 13,
        "message": "Invalid terminal signature"
      },
      {
        "ip": 30,
        "line": 15,
        "message": "Unexpected number of outputs, must be 2 or 3"
      },
      {
        "ip": 37,
        "line": 19,
        "message": "Invalid token category"
      },
      {
        "ip": 58,
        "line": 30,
        "message": "Access denied: Terminal is not authorized"
      },
      {
        "ip": 61,
        "line": 31,
        "message": "Access denied: Invalid terminal id"
      },
      {
        "ip": 66,
        "line": 32,
        "message": "Authentication has expired"
      },
      {
        "ip": 70,
        "line": 35,
        "message": "Auth NFT output commitment should not change"
      },
      {
        "ip": 76,
        "line": 40,
        "message": "Auth NFT must send back to this contract"
      },
      {
        "ip": 86,
        "line": 45,
        "message": "Send amount must send to the recipient"
      },
      {
        "ip": 92,
        "line": 49,
        "message": "Send amount exceeds spend limit"
      },
      {
        "ip": 100,
        "line": 53,
        "message": "Change must be sent back to contract"
      },
      {
        "ip": 114,
        "line": 58,
        "message": "Invalid owner public key hash"
      },
      {
        "ip": 120,
        "line": 59,
        "message": "Invalid owner signature"
      },
      {
        "ip": 131,
        "line": 63,
        "message": "Invalid owner public key hash"
      },
      {
        "ip": 134,
        "line": 64,
        "message": "Invalid owner signature"
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.3"
  },
  "updatedAt": "2025-08-13T06:04:28.983Z"
}